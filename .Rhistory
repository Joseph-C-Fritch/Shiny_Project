theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = c('2008', '2009', '2010', '2011',
'2012', '2013', '2014'))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'Red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = c('2008', '2009', '2010', '2011',
'2012', '2013'))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'Red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = c('2008', '2009', '2010', '2011'))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'Red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = c('2008', '2009'))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'Red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = '2008')
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'Red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = year(Period.Year))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'Red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = Period.Year)
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = Red)) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = Period.Year)
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = Indicator.Name)) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = Period.Year)
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(fill = Indicator.Name)) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_x_discrete(limits = Period.Year)
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(fill = Indicator.Name)) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank())
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(fill = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank())
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank())
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank(),legend.key = 'sadf')
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank(),legend.text = 'Branch')
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c("Branch"), values = c("red"))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(Indicator.Name), values = c("red"))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') + xlim(2008,2018) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
ggplot(df, aes(x = Period.Year, y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') + xlim(2008,2018) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
ggplot(df, aes(x = as.Integer(Period.Year), y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
ggplot(df, aes(x = as.integer(Period.Year), y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
ggplot(df, aes(x = factor(Period.Year), y = Average_OTP)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
ggplot(df, aes(x = factor(Period.Year), y = Average_OTP, group = 1)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v4.R')
runApp('Lirr_Shiny_v4.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
#Overall OTP by month
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "On-Time Performance")%>%
group_by(., Period.Month)%>%
summarise(., Average_OTP = mean(Monthly.Actual))
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
#Overall OTP by month
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "On-Time Performance")%>%
group_by(., Period.Month)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Monthly.Actual))
top1 <- head(df, 1)
bot1 <- tail(df, 1)
#Overall OTP by month
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "On-Time Performance")%>%
group_by(., Period.Month)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
top1 <- head(df, 1)
bot1 <- tail(df, 1)
View(top1)
View(bot1)
View(top1)
View(bot1)
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
#Overall OTP by month
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "Bablyon")%>%
group_by(., Period.Month)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
top1 <- head(df, 1)
bot1 <- tail(df, 1)
View(bot1)
#Overall OTP by month
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "On-Time Performance")%>%
group_by(., Period.Month)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
top1 <- head(df, 1)
bot1 <- tail(df, 1)
View(bot1)
View(df)
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "Port Jefferson")%>%
group_by(., Indicator.Name, Period.Year)%>%
summarise(., Average_OTP = mean(Monthly.Actual))
ggplot(df, aes(x = factor(Period.Year), y = Average_OTP, group = 1)) +
geom_line(aes(color = 'red')) +
xlab("Year") + ylab('Percentage On-Time, (%)') +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle('Branch On-Time Performance By Year') +
theme(legend.title = element_blank()) +
scale_color_manual(labels = c(df$Indicator.Name), values = c("red"))
#Overall OTP by month comparison
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "Port Jefferson")%>%
group_by(., Indicator.Name, Period.Year)%>%
summarise(., Average_OTP = mean(Monthly.Actual))
arrange(., desc(Average_OTP))
df = Performance_DF_Clean%>%
filter(., Indicator.Name == "Port Jefferson")%>%
group_by(., Indicator.Name, Period.Year)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
runApp('Lirr_Shiny_v3.R')
stops_df = read.csv("./stops.csv",stringsAsFactors = FALSE)
View(stops_df)
View(Performance_DF_Clean)
View(df)
branches = unique(Performance_DF_Clean$Indicator.Name)
branches
branches = branches[[2,]]
branches = branches[[2:length(branches)]]
branches = branches[[1]][[2:length(branches)]]
temp_df = filter(Performance_DF_Clean, Indicator.Name == "On-Time Performance")
branches = unique(Performance_DF_Clean$Indicator.Name)
branches
temp_df = filter(Performance_DF_Clean, Indicator.Name != "On-Time Performance")
branches = unique(temp_df$Indicator.Name)
branches
runApp('Lirr_Shiny_v3.R')
temp_df = Performance_DF_Clean%>%
filter(Performance_DF_Clean, Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))%>%
unique(., Indicator.Name)
#This function cleans text
clean_text <- function(x,y) {
z = gsub(y,'', x)
return(z)
}
temp_df = Performance_DF_Clean%>%
filter(Performance_DF_Clean, Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))%>%
unique(., Indicator.Name)
temp_df = Performance_DF_Clean%>%
filter(Performance_DF_Clean, Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))%>%
branches = unique(temp_df, Indicator.Name)
branches
temp_df = Performance_DF_Clean%>%
filter(Performance_DF_Clean, Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))
branches = unique(temp_df, Indicator.Name)
branches
temp_df = Performance_DF_Clean%>%
filter(Performance_DF_Clean, Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))
temp_df = Performance_DF_Clean%>%
filter(., Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))
temp_df = Performance_DF_Clean%>%
filter(., Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))%>%
unique(., Indicator.Name)
temp_df = Performance_DF_Clean%>%
filter(., Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkama"))
branches = unique(temp_df, Indicator.Name)
branches
branches = unique(temp_df$Indicator.Name)
branches
temp_df = Performance_DF_Clean%>%
filter(., Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkoma"))
branches = unique(temp_df$Indicator.Name)
branches
branches = as.data.frame(unique(temp_df$Indicator.Name))
View(branches)
branches$Indicator.Name = as.data.frame(unique(temp_df$Indicator.Name))
branches
temp_df = Performance_DF_Clean%>%
filter(., Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkoma"))
branches$Indicator.Name = as.data.frame(unique(temp_df$Indicator.Name))
branches
branches$Indicator.Name = branches
branches
temp_df = Performance_DF_Clean%>%
filter(., Indicator.Name != "On-Time Performance")%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"Hicksville/"))%>%
mutate(., Indicator.Name = clean_text(Indicator.Name,"/Ronkonkoma"))
branches = as.data.frame(unique(temp_df$Indicator.Name))
branches = as.data.frame(unique(temp_df$Indicator.Name))
branches = select(branches, Indicator.Name = 'unique(temp_df$Indicator.Name)')
branches
stop_df2 = left_join(branches,stops_df,by = 'Indicator.Name')
stop_df2 = select(branches, Indicator.Name = 'stop_name')
stop_df2 = select(stops_df, Indicator.Name = 'stop_name')
stop_df3 = left_join(branches,stops_df,by = 'Indicator.Name')
View(stop_df2)
stop_df2 = select(stops_df, Indicator.Name = 'stop_name', stop_lat, stop_lon)
View(stop_df2)
stop_df3 = left_join(branches,stops_df,by = 'Indicator.Name')
stop_df3 = left_join(branches,stops_df2,by = 'Indicator.Name')
stops_df2 = select(stops_df, Indicator.Name = 'stop_name', stop_lat, stop_lon)
stop_df3 = left_join(branches,stops_df2,by = 'Indicator.Name')
View(stop_df3)
stops_df4 = filter(stops_df, stop_name == 'Penn Station')
View(stops_df4)
View(stops_df4)
View(stop_df3)
num_of_stations = c(16,7,10,5,9,14,14,6,10,13)
distance = c(117,22.8,59.4,22.5,22.6,96.1,32.3,24.9,34.7,19.9)
station_name = c('Montauk', 'Far Rockaway','Port Jefferson','West Hempstead',
'Hempstead','Greenport','Bablyon','Long Beach','Oyster Bay', 'Port Washington')
assoc_df = as.data.frame(station_name, num_of_stations, distance)
View(assoc_df)
assoc_df = data.frame(station_name, num_of_stations, distance)
View(assoc_df)
df_test%>%
filter(., Indicator.Name == 'On-Time Performance')%>%
filter(., Period.Year == input$year)%>%
group_by(Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name == 'On-Time Performance')%>%
filter(., Period.Year == input$year)%>%
group_by(Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
#combine with overall delay
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name == 'On-Time Performance')%>%
group_by(Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
View(test_df)
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name == 'On-Time Performance')%>%
group_by(.,Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name == 'On-Time Performance')%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
View(test_df)
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name != 'On-Time Performance')%>%
group_by(., Indicator.Name)
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
#combine with overall delay
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name != 'On-Time Performance')%>%
group_by(., Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
View(test_df)
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name != 'On-Time Performance')%>%
filter(., Indicator.Name != 'Hicksville/Huntington')
group_by(., Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name != 'On-Time Performance')%>%
filter(., Indicator.Name != 'Hicksville/Huntington')%>%
group_by(., Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
View(test_df)
num_of_stations = c(16,7,10,5,9,14,14,6,10,13)
distance = c(117,22.8,59.4,22.5,22.6,96.1,32.3,24.9,34.7,19.9)
station_name = c('Montauk', 'Far Rockaway','Port Jefferson','West Hempstead',
'Hempstead','Greenport/Ronkonkoma','Bablyon','Long Beach','Oyster Bay', 'Port Washington')
assoc_df = data.frame(station_name, num_of_stations, distance)
##################################
#Branch Distance and #of Stations
num_of_stations = c(16,7,10,5,9,14,14,6,10,13)
distance = c(117,22.8,59.4,22.5,22.6,96.1,32.3,24.9,34.7,19.9)
Indicator.Name = c('Montauk', 'Far Rockaway','Port Jefferson','West Hempstead',
'Hempstead','Greenport/Ronkonkoma','Bablyon','Long Beach','Oyster Bay', 'Port Washington')
assoc_df = data.frame(station_name, num_of_stations, distance)
View(assoc_df)
num_of_stations = c(16,7,10,5,9,14,14,6,10,13)
distance = c(117,22.8,59.4,22.5,22.6,96.1,32.3,24.9,34.7,19.9)
Indicator.Name = c('Montauk', 'Far Rockaway','Port Jefferson','West Hempstead',
'Hempstead','Greenport/Ronkonkoma','Bablyon','Long Beach','Oyster Bay', 'Port Washington')
assoc_df = data.frame(station_name, num_of_stations, distance)
View(assoc_df)
assoc_df1 = data.frame(station_name, num_of_stations, distance)
View(assoc_df1)
assoc_df = data.frame(Idicator.Name, num_of_stations, distance)
num_of_stations = c(16,7,10,5,9,14,14,6,10,13)
distance = c(117,22.8,59.4,22.5,22.6,96.1,32.3,24.9,34.7,19.9)
Indicator.Name = c('Montauk', 'Far Rockaway','Port Jefferson','West Hempstead',
'Hempstead','Greenport/Ronkonkoma','Bablyon','Long Beach','Oyster Bay', 'Port Washington')
assoc_df = data.frame(Idicator.Name, num_of_stations, distance)
assoc_df = data.frame(Indicator.Name, num_of_stations, distance)
View(assoc_df)
#combine with overall delay
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name != 'On-Time Performance')%>%
filter(., Indicator.Name != 'Hicksville/Huntington')%>%
group_by(., Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
assoc_df1 = left_join(assoc_df, test_df, by = 'Indicator.Name' )
View(assoc_df1)
#Branch Distance and #of Stations
num_of_stations = c(16,7,10,5,9,14,14,6,10,13)
distance = c(117,22.8,59.4,22.5,22.6,96.1,32.3,24.9,34.7,19.9)
Indicator.Name = c('Montauk', 'Far Rockaway','Port Jefferson','West Hempstead',
'Hempstead','Greenport/Ronkonkoma','Babylon','Long Beach','Oyster Bay', 'Port Washington')
assoc_df = data.frame(Indicator.Name, num_of_stations, distance)
#combine with overall delay
test_df = Performance_DF_Clean%>%
filter(., Indicator.Name != 'On-Time Performance')%>%
filter(., Indicator.Name != 'Hicksville/Huntington')%>%
group_by(., Indicator.Name)%>%
summarise(., Average_OTP = mean(Monthly.Actual))%>%
arrange(., desc(Average_OTP))
assoc_df1 = left_join(assoc_df, test_df, by = 'Indicator.Name' )
View(assoc_df1)
write.csv(assoc_df1, file = "assoc_df.csv",row.names=FALSE)
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
runApp('Lirr_Shiny_v5.R')
library(shiny); runApp('Lirr_Shiny_Working.R')
